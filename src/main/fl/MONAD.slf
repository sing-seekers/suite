use external STANDARD ~
define nothing := atom:Nothing ~
define getm~ := (:t => any -> n^Mutable :t -> Do^:t) of (scope => var =>
	do (
		call%i-v2_{atom:INTRN!MonadIntrinsics.get | get%i}_{scope}_{var}
	)
) ~
define setm~ := (:t => any -> n^Mutable :t -> :t -> Do^any) of (scope => var => value =>
	do (
		call%i-v3_{atom:INTRN!MonadIntrinsics.put | get%i}_{scope}_{var}_{value}
	)
) ~
define liftm :=
	fun => m0 => do (fun_{m0 #})
~
define liftm2 :=
	fun => m0 => m1 => do (fun_{m0 #}_{m1 #})
~
define appendm :=
	liftm2_{append}
~
define concatm :=
	fold-right_{appendm}_{do ()}
~
define seqm :=
	liftm2_{(:t => any -> :t -> :t) of
		atom:INTRN!SeqIntrinsics.seq | get%i | call%i-t2
	}
~
define seqsm :=
	fold-right_{seqm}_{do nothing}
~
define whilem :=
	cond => loop => do (
		if (cond #)
		then (loop # whilem_{cond}_{loop} #)
		else nothing
	)
~
